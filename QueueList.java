/**
 * QueueList implementation of {@link Queue}
 * <p>
 * Note: DO NOT EDIT THIS FILE.
 * ***********************************************************************
 * Computer Science 102: Data Structures
 * New York University, Fall 2013,
 * Lecturers: Eric Koskinen and Daniel Schwartz-Narbonne
 * ***********************************************************************
 *
 * @author      Eric Koskinen       <ejk@cs.nyu.edu>
 * @version     $Revision$
 * @since       2013-09-01
 */

public class QueueList<E> implements Queue<E> {

    // Represent the Queue as a List using the generic MyList<E>
    private MyList<E> queue;
    public QueueList() { queue = new MyList<E>(); }
    public int size() { return queue.size();}
    public boolean isEmpty() { return queue.isEmpty();}

    /**
     * The Enqueue() operation inserts at the front of the list
     */
    public void enqueue(E element) {
        queue.insertFront(element);
    }

    /**
     * The Dequeue() operation removes from the back of the list
     * (and throws an exception if the list is empty)
     */
    public E dequeue() throws InvalidOperationException {
        if (!queue.isEmpty()) {
            return queue.removeBack();
        } else {
            throw new InvalidOperationException("Queue empty: nothing to dequeue.");
        }
    }

    /**
     * Output operations
     */
    public String toString() {
        return "IN -> " + queue.toString() + " -> OUT";
    }
    public void PrettyPrint() {
	System.out.println(toString());
    }
}